1. скачиваем git
2. задаем глобальные параметры
   git config --global user.name "Alexey B
   git config --global user.email "********@mail.ru"
проверяем, что параметры установлены
git config --list

3. создаем каталог, открывает git bash
   переходим в каталог, например, 
  cd E:\git
  создаем каталог:
  git init

добавляется как скрытая папка. 
Если выходит ошибка Reinitialized existing Git repository in E:/git/.git/ - каталог уже создан и сейчас идет попытка создать еще раз.


!!! если каталог уже создан, то для работы с гит необходимо перейти в правильный каталог

4. Работа с файлами
  файлы могут быть отслеживаемые и не отслеживаемые. Если просто добавить в каталог, то файлы будет не отслеживаемые
Перед тем что то делать надо проверить статус:
git status # проверка

On branch master #  в какой ветке находимся, в этом случае в ветке мастера

No commits yet

Untracked files: #  показывает не отслеживаемые файлы
  (use "git add <file>..." to include in what will be committed) #   и даже подсказывает команду
        e1Zo43MkZi8.jpg #  тестовые файлы которые добавил в директорию
        test.txt

nothing added to commit but untracked files present (use "git add" to track)

Чтобы добавить эти файлы, делаем
git add . # точка означает, что добавляем все

делаем проерку статуса. 

Далее если в файл вноим какие-то изменения и делаем 
git status


On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   e1Zo43MkZi8.jpg
        new file:   test.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test.txt

Здесь уже показывает, что есть модифицированные файлы.
Чтобы добавить файл, делаем
git add  test.txt

и делаем проверку статуса.

Если внести еще изменение в файл и сделать проверку статуса
git status

On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   e1Zo43MkZi8.jpg
        new file:   test.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test.txt

увидим, что файл test.txt есть как новый и как модифицированный

git add .

git status
проверяем статус

посмотреть текущие изменения
git diff


5. Отправка на удаленную сторону, например, сайт гитхаб
git remote add origin https://github

git push -u origin master
ввести логин и пароль 

6. Для выкачивания
git clone и указывается ресурс


редактор Vim
i - режим ввода текста
Esc - возвращает в обычный режим

:wq потом Enter - сохранение и выход

:qa! потом Enter - без сохранения и выход



7. команды
git init
git add .
git commit -m "comment"

git remote add origin https://github.com/alexei2309/git_test.git
git push -u origin master

#выкачать себе гит, выбрав директорию
git clone https://github.com/alexei2309/git_test.git

каждый день начинается с команды - скачиваем все обновления
git pull

8. alias
Найти config - User - git.config
создать раздел

[alias]
	s = status --short



9. Откать изменения в определенном файле, например, test.txt до запуска git add .
git checkout -- test.txt

удалить для всех файлов
git checkout .

10. Откатить после команды git add . на примере файла test.txt
git reset -- test.txt

он выпадет из add и дальше уже сделать
git checkout -- test.txt

11. откать жестко на 1 коммит назад
git reset --hard HEAD^1

если откаться до состояния перед commit, чтобы принять решение по изменения
git reset --soft HEAD^1 - отменяет commit

git reset -- test.txt - отменяет  до add 

git checkout -- test.txt - отменяет изменения

11. работа с ветками
git branch # посмотреть все ветки и * показывает текущую
git branch -v # показывает последний commit для этой ветки

git branch develop # создание новой ветки develop

git checkout develop # перейти в ветку develop

Между ветками можно переключаться, в git log обращаться внимание на HEAD - показывет текущее нахождение


git branch -m dev # находся в ветку, переименова ветку



#чтобы изменения по веткам ушли на remote делаем
git push
#выходит подсказка для выполнения. Для любой новой ветки надо делать эту команду
git push --set-upstream origin dev


#удаление ветки dev, находясь в другой например master
git branch -D dev 

----
удаление веток

git branch -d branchname == удаление локальной уже слитой ветки
git branch -D branchname == принудительное удаление локальной ветки
git push origin :branchname == удаление ветки с центрального репозитория
----


12. gitignore
#создание gitignore
vim .gitignore
#добавляем файлы, например, /config.txt

Рекомендуется файлы добавлять до git add .
Если файлы уже попали в индекс, то игнорироваться не будут.
Для игнорирования надо выполнить

Аргумент --cached заставляет Git удалить файл из индекса, но не трогать рабочую область. 
То есть он буквально индексирует удаление файла, 
хотя этого удаления не было. Если сделать это с файлом, который не игнорируется, то после коммита 
он будет в категории неотслеживаемых (untracked).

git rm --cached <file-name> 

Если нужно убрать целую игнорируемую папку, добавляем ключ -r:
git rm -r --cached <path>

Эта удобная команда применяет rm ко всем файлам, указанным в .gitignore:
git rm --cached `git ls-files -i --exclude-from=.gitignore` 

Теперь результат команды git rm нужно зафиксировать коммитом.
git commit -m'removed gitignored files'

13. Посмотреть другой commit
! надо commit всех изменений
!! проверить в какой ветке, чтобы вернуться в нужную ветку  
$git branch

Чтобы потом вернуться в послдений commit, 
потом набрать git checkout <Имя ветки>, например, git checkout  master

Для перемещений в любой commit:
git checkout <Хеш коммита>

14. Посмотреть изменения commit
показываеет изменения, внесенные указанным коммитом.
git show <коммит>

просмотреть сразу несколько коммитов
$ git log -p
$ git log -p -2  